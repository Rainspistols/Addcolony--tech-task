{"ast":null,"code":"var _jsxFileName = \"/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/frontend/src/components/Weather.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\nimport Tooltip from '../ui/Tooltip';\n\nconst Weather = () => {\n  const dateBuild = d => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => setLocation({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }));\n  }, []);\n  useEffect(() => {\n    if (location.lat && location.lon) getCurrentWeather(location.lat, location.lon).then(result => {\n      setWeather(result);\n      console.log(result);\n    });\n  }, [location]);\n  const [inHover, setHover] = useState(false);\n\n  const toggleHover = () => {\n    setHover(inHover => !inHover);\n  };\n\n  return /*#__PURE__*/React.createElement(WeatherStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, weather.current && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, weather.timezone), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \" \", dateBuild(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    text: \"tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onMouseEnter: toggleHover,\n    onMouseLeave: toggleHover,\n    className: 'temperature ' + Math.round(weather.current.temp) > 25 ? 'temperature hot' : 'temperature',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, Math.round(weather.current.temp), \"\\xB0C\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, weather.current.weather[0].main, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`,\n    alt: weather.current.weather[0].main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  })))));\n};\n\nconst WeatherStyled = styled.div`\n  .lol {\n    position: relative;\n    z-index: 10;\n    background: red;\n    padding: 50px;\n  }\n  min-height: 100vh;\n  box-sizing: border-box;\n  color: ${({\n  theme\n}) => theme.color.white};\n  text-shadow: ${({\n  theme\n}) => theme.shadow};\n  text-align: center;\n  background: ${({\n  theme\n}) => theme.color.black};\n  ${({\n  theme\n}) => theme.flex.center};\n  flex-direction: column;\n\n  .location-container {\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n\n    margin-bottom: 50px;\n  }\n\n  .weather-container {\n    width: 100%;\n    .temperature {\n      font-size: 100px;\n      line-height: 100px;\n      font-weight: 700;\n      background-color: rgb(255, 255, 255, 0.1);\n      border-radius: 16px;\n      box-shadow: ${({\n  theme\n}) => theme.shadow};\n      margin-bottom: 20px;\n      width: 100%;\n      color: green;\n      position: relative;\n    }\n\n    .hot {\n      color: red;\n    }\n\n    .weather {\n      font-size: 50px;\n      line-height: 50px;\n      font-weight: 700;\n\n      ${({\n  theme\n}) => theme.flex.center};\n    }\n  }\n`;\nexport default Weather;","map":{"version":3,"sources":["/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/frontend/src/components/Weather.jsx"],"names":["React","useState","useEffect","styled","getCurrentWeather","Tooltip","Weather","dateBuild","d","modifiedDate","String","slice","weather","setWeather","location","setLocation","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","then","result","console","log","inHover","setHover","toggleHover","current","timezone","Date","Math","round","temp","main","icon","WeatherStyled","div","theme","color","white","shadow","black","flex","center"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\nimport Tooltip from '../ui/Tooltip';\n\nconst Weather = () => {\n  const dateBuild = (d) => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({ lat: null, lon: null });\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>\n      setLocation({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude,\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    if (location.lat && location.lon)\n      getCurrentWeather(location.lat, location.lon).then((result) => {\n        setWeather(result);\n        console.log(result);\n      });\n  }, [location]);\n\n  const [inHover, setHover] = useState(false);\n  const toggleHover = () => {\n    setHover((inHover) => !inHover);\n  };\n\n  return (\n    <WeatherStyled>\n      {weather.current && (\n        <>\n          <div className='location-container'>\n            <div className='location'>{weather.timezone}</div>\n            <div className='date'> {dateBuild(new Date())}</div>\n          </div>\n\n          <div className='weather-container'>\n            <Tooltip text='tooltip'>\n              <div\n                onMouseEnter={toggleHover}\n                onMouseLeave={toggleHover}\n                className={\n                  'temperature ' + Math.round(weather.current.temp) > 25\n                    ? 'temperature hot'\n                    : 'temperature'\n                }\n              >\n                {Math.round(weather.current.temp)}Â°C\n              </div>\n            </Tooltip>\n\n            <div className='weather'>\n              {weather.current.weather[0].main}\n              <img\n                src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`}\n                alt={weather.current.weather[0].main}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </WeatherStyled>\n  );\n};\n\nconst WeatherStyled = styled.div`\n  .lol {\n    position: relative;\n    z-index: 10;\n    background: red;\n    padding: 50px;\n  }\n  min-height: 100vh;\n  box-sizing: border-box;\n  color: ${({ theme }) => theme.color.white};\n  text-shadow: ${({ theme }) => theme.shadow};\n  text-align: center;\n  background: ${({ theme }) => theme.color.black};\n  ${({ theme }) => theme.flex.center};\n  flex-direction: column;\n\n  .location-container {\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n\n    margin-bottom: 50px;\n  }\n\n  .weather-container {\n    width: 100%;\n    .temperature {\n      font-size: 100px;\n      line-height: 100px;\n      font-weight: 700;\n      background-color: rgb(255, 255, 255, 0.1);\n      border-radius: 16px;\n      box-shadow: ${({ theme }) => theme.shadow};\n      margin-bottom: 20px;\n      width: 100%;\n      color: green;\n      position: relative;\n    }\n\n    .hot {\n      color: red;\n    }\n\n    .weather {\n      font-size: 50px;\n      line-height: 50px;\n      font-weight: 700;\n\n      ${({ theme }) => theme.flex.center};\n    }\n  }\n`;\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}