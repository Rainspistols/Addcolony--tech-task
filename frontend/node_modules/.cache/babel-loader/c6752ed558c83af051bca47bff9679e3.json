{"ast":null,"code":"var _jsxFileName = \"/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/frontend/src/components/TodoItem.jsx\";\nimport React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport DeleteButton from '../ui/DeleteButton';\nimport EditButton from '../ui/EditButton';\nimport SaveButton from '../ui/SaveButton';\nimport { useDispatch } from 'react-redux';\nimport { editTodo } from '../redux/actions';\n\nconst TodoItem = ({\n  todo\n}) => {\n  const [titleValue, setTitleValue] = useState(todo.title);\n  const [descriptionValue, setDescriptionValue] = useState(todo.description);\n  const [isEdit, setIsEdit] = useState(false);\n\n  const onEditClick = () => {\n    setIsEdit(true);\n  };\n\n  const disptach = useDispatch();\n\n  const onSaveButton = () => {\n    disptach(editTodo({\n      description: descriptionValue,\n      title: titleValue,\n      uuid: todo.uuid,\n      priority: todo.priority\n    }));\n    setIsEdit(false);\n  };\n\n  return /*#__PURE__*/React.createElement(TodoItemStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, isEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"input1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"TITLE:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    value: titleValue,\n    onChange: e => setTitleValue(e.target.value),\n    placeholder: \"value ...\",\n    id: \"input1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"input2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"DESCRIPTION:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: descriptionValue,\n    onChange: e => setDescriptionValue(e.target.value),\n    placeholder: \"description ...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"TITLE: \", todo.title), /*#__PURE__*/React.createElement(\"p\", {\n    class: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"DESCRIPTION: \", todo.description), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"PRIORITY: \", todo.priority), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DeleteButton, {\n    id: todo.uuid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), isEdit ? /*#__PURE__*/React.createElement(SaveButton, {\n    onClick: onSaveButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(EditButton, {\n    onClick: onEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst TodoItemStyled = styled.li`\n  font-size: 20px;\n  line-height: 20px;\n  margin-bottom: 10px;\n\n  display: flex;\n  justify-content: space-between;\n\n  .title {\n    font-weight: 600;\n    margin-bottom: 10px;\n  }\n\n  .content {\n    width: 70%;\n  }\n\n  .buttons {\n    width: 20%;\n    display: flex;\n    justify-content: space-around;\n  }\n\n  input {\n    ${({\n  theme\n}) => theme.input};\n    margin: 10px 0;\n  }\n`;\nexport default TodoItem;","map":{"version":3,"sources":["/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/frontend/src/components/TodoItem.jsx"],"names":["React","useState","styled","DeleteButton","EditButton","SaveButton","useDispatch","editTodo","TodoItem","todo","titleValue","setTitleValue","title","descriptionValue","setDescriptionValue","description","isEdit","setIsEdit","onEditClick","disptach","onSaveButton","uuid","priority","e","target","value","TodoItemStyled","li","theme","input"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport DeleteButton from '../ui/DeleteButton';\nimport EditButton from '../ui/EditButton';\nimport SaveButton from '../ui/SaveButton';\nimport { useDispatch } from 'react-redux';\nimport { editTodo } from '../redux/actions';\n\nconst TodoItem = ({ todo }) => {\n  const [titleValue, setTitleValue] = useState(todo.title);\n  const [descriptionValue, setDescriptionValue] = useState(todo.description);\n  const [isEdit, setIsEdit] = useState(false);\n\n  const onEditClick = () => {\n    setIsEdit(true);\n  };\n\n  const disptach = useDispatch();\n  const onSaveButton = () => {\n    disptach(\n      editTodo({\n        description: descriptionValue,\n        title: titleValue,\n        uuid: todo.uuid,\n        priority: todo.priority,\n      })\n    );\n    setIsEdit(false);\n  };\n\n  return (\n    <TodoItemStyled>\n      <div className='content'>\n        {isEdit ? (\n          <>\n            <label htmlFor='input1'>\n              TITLE:\n              <input\n                type='text'\n                required\n                value={titleValue}\n                onChange={(e) => setTitleValue(e.target.value)}\n                placeholder='value ...'\n                id='input1'\n              />\n            </label>\n\n            <label htmlFor='input2'>\n              DESCRIPTION:\n              <input\n                type='text'\n                value={descriptionValue}\n                onChange={(e) => setDescriptionValue(e.target.value)}\n                placeholder='description ...'\n              />\n            </label>\n          </>\n        ) : (\n          <>\n            <p className='title'>TITLE: {todo.title}</p>\n            <p class>DESCRIPTION: {todo.description}</p>\n            <p>PRIORITY: {todo.priority}</p>\n            <hr />\n          </>\n        )}\n      </div>\n\n      <div className='buttons'>\n        <DeleteButton id={todo.uuid} />\n        {isEdit ? (\n          <SaveButton onClick={onSaveButton} />\n        ) : (\n          <EditButton onClick={onEditClick} />\n        )}\n      </div>\n    </TodoItemStyled>\n  );\n};\n\nconst TodoItemStyled = styled.li`\n  font-size: 20px;\n  line-height: 20px;\n  margin-bottom: 10px;\n\n  display: flex;\n  justify-content: space-between;\n\n  .title {\n    font-weight: 600;\n    margin-bottom: 10px;\n  }\n\n  .content {\n    width: 70%;\n  }\n\n  .buttons {\n    width: 20%;\n    display: flex;\n    justify-content: space-around;\n  }\n\n  input {\n    ${({ theme }) => theme.input};\n    margin: 10px 0;\n  }\n`;\n\nexport default TodoItem;\n"]},"metadata":{},"sourceType":"module"}