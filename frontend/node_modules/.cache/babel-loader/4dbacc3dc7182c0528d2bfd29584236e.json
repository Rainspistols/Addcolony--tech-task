{"ast":null,"code":"var _jsxFileName = \"/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/src/components/Weather.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\n\nconst Weather = () => {\n  const dateBuild = d => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  const [isHover, setHover] = useState(false);\n\n  const onMouseEnter = () => {\n    setHover(true);\n  };\n\n  const onMouseLeave = () => {\n    setHover(false);\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => setLocation({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }));\n  }, []);\n  useEffect(() => {\n    if (location.lat && location.lon) getCurrentWeather(location.lat, location.lon).then(result => {\n      setWeather(result);\n      console.log(result);\n    });\n  }, [location]);\n  return /*#__PURE__*/React.createElement(WeatherStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, weather.current && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, weather.timezone), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \" \", dateBuild(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-container\",\n    onMuseE: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, isHover && /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }, \"LALALLAL\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'temperature ' + Math.round(weather.current.temp) > 25 ? 'temperature hot' : 'temperature',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, Math.round(weather.current.temp), \"\\xB0C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, weather.current.weather[0].main, /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`,\n    alt: weather.current.weather[0].main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  })))));\n};\n\nconst WeatherStyled = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  color: ${({\n  theme\n}) => theme.color.white};\n  text-shadow: ${({\n  theme\n}) => theme.shadow};\n  text-align: center;\n  background: ${({\n  theme\n}) => theme.color.black};\n  ${({\n  theme\n}) => theme.flex.center};\n  flex-direction: column;\n\n  .location-container {\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n\n    margin-bottom: 50px;\n  }\n\n  .weather-container {\n    width: 100%;\n    .temperature {\n      font-size: 100px;\n      line-height: 100px;\n      font-weight: 700;\n      background-color: rgb(255, 255, 255, 0.1);\n      border-radius: 16px;\n      box-shadow: ${({\n  theme\n}) => theme.shadow};\n      margin-bottom: 20px;\n      width: 100%;\n      color: green;\n    }\n\n    .hot {\n      color: red;\n    }\n\n    .weather {\n      font-size: 50px;\n      line-height: 50px;\n      font-weight: 700;\n\n      ${({\n  theme\n}) => theme.flex.center};\n    }\n  }\n`;\nexport default Weather;","map":{"version":3,"sources":["/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/src/components/Weather.jsx"],"names":["React","useState","useEffect","styled","getCurrentWeather","Weather","dateBuild","d","modifiedDate","String","slice","weather","setWeather","location","setLocation","lat","lon","isHover","setHover","onMouseEnter","onMouseLeave","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","then","result","console","log","current","timezone","Date","Math","round","temp","main","icon","WeatherStyled","div","theme","color","white","shadow","black","flex","center"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\n\nconst Weather = () => {\n  const dateBuild = (d) => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({ lat: null, lon: null });\n  const [isHover, setHover] = useState(false);\n\n  const onMouseEnter = () => {\n    setHover(true);\n  };\n\n  const onMouseLeave = () => {\n    setHover(false);\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>\n      setLocation({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude,\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    if (location.lat && location.lon)\n      getCurrentWeather(location.lat, location.lon).then((result) => {\n        setWeather(result);\n        console.log(result);\n      });\n  }, [location]);\n\n  return (\n    <WeatherStyled>\n      {weather.current && (\n        <>\n          <div className='location-container'>\n            <div className='location'>{weather.timezone}</div>\n            <div className='date'> {dateBuild(new Date())}</div>\n          </div>\n\n\n          <div className='weather-container' onMuseE>\n            {isHover && <h1>LALALLAL</h1>}\n            <div\n              className={\n                'temperature ' + Math.round(weather.current.temp) > 25\n                  ? 'temperature hot'\n                  : 'temperature'\n              }\n            >\n              {Math.round(weather.current.temp)}Â°C\n            </div>\n\n            <div className='weather'>\n              {weather.current.weather[0].main}\n              <img\n                src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`}\n                alt={weather.current.weather[0].main}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </WeatherStyled>\n  );\n};\n\nconst WeatherStyled = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  color: ${({ theme }) => theme.color.white};\n  text-shadow: ${({ theme }) => theme.shadow};\n  text-align: center;\n  background: ${({ theme }) => theme.color.black};\n  ${({ theme }) => theme.flex.center};\n  flex-direction: column;\n\n  .location-container {\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n\n    margin-bottom: 50px;\n  }\n\n  .weather-container {\n    width: 100%;\n    .temperature {\n      font-size: 100px;\n      line-height: 100px;\n      font-weight: 700;\n      background-color: rgb(255, 255, 255, 0.1);\n      border-radius: 16px;\n      box-shadow: ${({ theme }) => theme.shadow};\n      margin-bottom: 20px;\n      width: 100%;\n      color: green;\n    }\n\n    .hot {\n      color: red;\n    }\n\n    .weather {\n      font-size: 50px;\n      line-height: 50px;\n      font-weight: 700;\n\n      ${({ theme }) => theme.flex.center};\n    }\n  }\n`;\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}