{"ast":null,"code":"var _jsxFileName = \"/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/src/components/Weather.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\n\nconst Weather = () => {\n  const dateBuild = d => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({\n    lat: null,\n    lon: null\n  });\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => setLocation({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }));\n  }, []);\n  useEffect(() => {\n    if (location.lat && location.lon) getCurrentWeather(location.lat, location.lon).then(result => {\n      setWeather(result);\n      console.log(result);\n    });\n  }, [location]);\n  return /*#__PURE__*/React.createElement(WeatherStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, weather.current && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, weather.timezone), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \" \", dateBuild(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temperature\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, Math.round(weather.current.temp), \"\\xB0C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, weather.current.weather[0].main))));\n};\n\nconst WeatherStyled = styled.div`\n  background: black;\n  .location-container {\n    color: ${({\n  theme\n}) => theme.color.white};\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n    text-align: center;\n\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n  }\n\n  .weather-container {\n    text-align: center;\n  }\n\n  .weather-container .temperature {\n    color: white;\n    position: relative;\n    display: inline-block;\n    margin: 30px auto;\n    padding: 15px 25px;\n    font-size: 100px;\n    font-weight: 700;\n    background-color: rgb(255, 255, 255, 0.1);\n    border-radius: 16px;\n    box-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n  }\n\n  .weather-container .weather {\n    color: white;\n    font-size: 50px;\n    font-weight: 700;\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n  }\n`;\nexport default Weather;","map":{"version":3,"sources":["/Users/tata/Documents/Max/my projects/ReactJs/Training/test--addcolony/src/components/Weather.jsx"],"names":["React","useState","useEffect","styled","getCurrentWeather","Weather","dateBuild","d","modifiedDate","String","slice","weather","setWeather","location","setLocation","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","then","result","console","log","current","timezone","Date","Math","round","temp","main","WeatherStyled","div","theme","color","white"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,SAAS,GAAIC,CAAD,IAAO;AACvB,QAAIC,YAAY,GAAGC,MAAM,CAACF,CAAD,CAAzB;AACA,WAAOC,YAAY,CAACE,KAAb,CAAmB,CAAnB,EAAsB,EAAtB,CAAP;AACD,GAHD;;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC;AAAEc,IAAAA,GAAG,EAAE,IAAP;AAAaC,IAAAA,GAAG,EAAE;AAAlB,GAAD,CAAxC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IACvCN,WAAW,CAAC;AACVC,MAAAA,GAAG,EAAEK,QAAQ,CAACC,MAAT,CAAgBC,QADX;AAEVN,MAAAA,GAAG,EAAEI,QAAQ,CAACC,MAAT,CAAgBE;AAFX,KAAD,CADb;AAMD,GAPQ,EAON,EAPM,CAAT;AASArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,CAACE,GAAT,IAAgBF,QAAQ,CAACG,GAA7B,EACEZ,iBAAiB,CAACS,QAAQ,CAACE,GAAV,EAAeF,QAAQ,CAACG,GAAxB,CAAjB,CAA8CQ,IAA9C,CAAoDC,MAAD,IAAY;AAC7Db,MAAAA,UAAU,CAACa,MAAD,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,KAHD;AAIH,GANQ,EAMN,CAACZ,QAAD,CANM,CAAT;AAQA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACiB,OAAR,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BjB,OAAO,CAACkB,QAAnC,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAwBvB,SAAS,CAAC,IAAIwB,IAAJ,EAAD,CAAjC,CAFF,CADF,eAKE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,KAAL,CAAWrB,OAAO,CAACiB,OAAR,CAAgBK,IAA3B,CADH,UADF,eAIE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BtB,OAAO,CAACiB,OAAR,CAAgBjB,OAAhB,CAAwB,CAAxB,EAA2BuB,IAArD,CAJF,CALF,CAFJ,CADF;AAkBD,CA5CD;;AA8CA,MAAMC,aAAa,GAAGhC,MAAM,CAACiC,GAAI;;;aAGpB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,KAAN,CAAYC,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAH9C;AA4CA,eAAelC,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { getCurrentWeather } from '../utils/api';\n\nconst Weather = () => {\n  const dateBuild = (d) => {\n    let modifiedDate = String(d);\n    return modifiedDate.slice(4, 15);\n  };\n\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState({ lat: null, lon: null });\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) =>\n      setLocation({\n        lat: position.coords.latitude,\n        lon: position.coords.longitude,\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    if (location.lat && location.lon)\n      getCurrentWeather(location.lat, location.lon).then((result) => {\n        setWeather(result);\n        console.log(result);\n      });\n  }, [location]);\n\n  return (\n    <WeatherStyled>\n      {weather.current && (\n        <div>\n          <div className='location-container'>\n            <div className='location'>{weather.timezone}</div>\n            <div className='date'> {dateBuild(new Date())}</div>\n          </div>\n          <div className='weather-container'>\n            <div className='temperature'>\n              {Math.round(weather.current.temp)}Â°C\n            </div>\n            <div className='weather'>{weather.current.weather[0].main}</div>\n          </div>\n        </div>\n      )}\n    </WeatherStyled>\n  );\n};\n\nconst WeatherStyled = styled.div`\n  background: black;\n  .location-container {\n    color: ${({ theme }) => theme.color.white};\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n    text-align: center;\n\n    .location {\n      font-size: 30px;\n      line-height: 30px;\n      margin-bottom: 20px;\n    }\n    .date {\n      font-size: 20px;\n      line-height: 20px;\n    }\n  }\n\n  .weather-container {\n    text-align: center;\n  }\n\n  .weather-container .temperature {\n    color: white;\n    position: relative;\n    display: inline-block;\n    margin: 30px auto;\n    padding: 15px 25px;\n    font-size: 100px;\n    font-weight: 700;\n    background-color: rgb(255, 255, 255, 0.1);\n    border-radius: 16px;\n    box-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n  }\n\n  .weather-container .weather {\n    color: white;\n    font-size: 50px;\n    font-weight: 700;\n    text-shadow: 3px 3px rgba(58, 53, 53, 0.73);\n  }\n`;\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}